#:import Window kivy.core.window.Window
#:import Vector kivy.vector.Vector

<PlayManButton>:
    text: 'Play man'
    canvas:
        Color:
            rgba: 0, 0, 1, 0.5 + 0.4*self.anim_progress
        Rectangle:
            pos: Vector(self.pos) + 0.05*Vector(self.size)
            size: 0.9*Vector(self.size)
    Label:
        text: root.text

<MoveButton>:
    text: 'Move ball'
    canvas:
        Color:
            rgba: 0, 1, 0, 0.5 + 0.3*self.anim_progress
        Rectangle:
            pos: Vector(self.pos) + 0.05*Vector(self.size)
            size: 0.9*Vector(self.size)
    Label:
        text: root.text

<InterfaceButtons>:
    mode: self.board.touch_mode if self.board else 'play_man'
    play_man_button: playman
    move_button: move
    Label:
        text_size: self.size
        text: root.board.current_player + ' to play' if root.board else ''
        valign: 'middle'
        halign: 'center'
    PlayManButton:
        id: playman
        on_release: root.board.touch_mode = 'play_man'
        active: True if root.touch_mode == 'play_man' else False
    MoveButton:
        id: move
        on_release: root.board.touch_mode = 'move_ball'
        active: True if root.touch_mode == 'move_ball' else False
    Button:
        text: 'Confirm'
        on_release: root.board.confirm_speculation()
        background_color: 1, 0, 0, 1

<MoveMakingMarker>:
    canvas:
        Color:
            rgba: self.colour[0], self.colour[1], self.colour[2], 0.7*self.anim_progress
        Triangle:
            points:
                [self.center_x - 0.4*self.width - (1-self.anim_progress)*5*self.width,
                self.center_y,
                self.center_x - 0.4*self.width - (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.3*self.height,
                self.center_x - 0.4*self.width - (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.7*self.height]
        Triangle:
            points:
                [self.center_x + 0.4*self.width + (1-self.anim_progress)*5*self.width,
                self.center_y,
                self.center_x + 0.4*self.width + (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.3*self.height,
                self.center_x + 0.4*self.width + (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.7*self.height]
        Triangle:
            points:
                [self.center_x,
                self.center_y - 0.4*self.height - (1-self.anim_progress)*5*self.height,
                self.center_x + 0.2*self.width,
                self.center_y - 0.4*self.height - (7+3*(1-self.anim_progress))*self.height,
                self.x + 0.3*self.width,
                self.center_y - 0.4*self.height - (7+3*(1-self.anim_progress))*self.height]
        Triangle:
            points:
                [self.center_x,
                self.center_y + 0.4*self.height + (1-self.anim_progress)*5*self.height,
                self.center_x + 0.2*self.width,
                self.center_y + 0.4*self.height + (7+3*(1-self.anim_progress))*self.height,
                self.x + 0.3*self.width,
                self.center_y + 0.4*self.height + (7+3*(1-self.anim_progress))*self.height]


<VictoryPopup>:
    height: 260
    size_hint_y: None
    size_hint_x: 0.8
    Label:
        text: root.winner + ' wins!'
        padding: 10, 10
        font_size: 100
        text_size: self.size
        halign: 'center'
        valign: 'middle'

<ConflictingSegmentMarker>:
    canvas:
        Color:
            rgba: 0.9, 0.1, 0.1, 1
        Line:
            points: root.points
            width: 2

<SpeculativeSegmentMarker>:
    canvas:
        Color:
            rgba: 0.1, 0.9, 0.1, 1.0
        Line:
            points: [root.start_pos[0], root.start_pos[1], root.end_pos[0], root.end_pos[1]]
            width: 2

<BoardInterface>:
    orientation: 'vertical'
    BoardContainer:
        id: boardcontainer
        size_hint_y: None if Window.height > 1.2*Window.width else 3
        height: Window.width
    InterfaceButtons:
        board: boardcontainer.board
        touch_mode: boardcontainer.board.touch_mode

<LegalMoveMarker>:
    canvas:
        Color:
            rgba: 0, 0, 1, 0.1
        Ellipse:
            size: self.size
            pos: self.pos

<Ball>:
    allow_stretch: True
    mipmap: True
    source: 'stones/white_simple_100.png'

<Man>:
    allow_stretch: True
    mipmap: True
    source: 'stones/black_simple_100.png'

<BoardContainer>:
    board: board
    anchor_x: 'center'
    anchor_y: 'center'
    aspect_ratio: float(self.height) / float(self.width)
    Board:
        id: board
        size_hint: None, None
        width: root.height / self.aspect_ratio if (self.portrait and self.aspect_ratio > root.aspect_ratio) else root.width
        height: root.height if (self.portrait and self.aspect_ratio > root.aspect_ratio) else root.width * self.aspect_ratio
        

<Board>:
    id: board
    use_ai: True
    move_marker: move_marker
    aspect_ratio: float(self.shape_y) / float(self.shape_x)
    portrait: True if self.aspect_ratio > 1.0 else False
    shape: (self.grid_x + 2*self.padding_x, self.grid_y + 2*self.padding_y)
    cell_size: (float(self.width) / self.shape_x, float(self.height) / self.shape_y)
    on_pos: self.calculate_lines(); self.reposition_ui_elements()
    on_size: self.calculate_lines(); self.reposition_ui_elements()
    on_grid: self.abstractboard.shape = self.grid
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            size: self.size
            pos: self.pos
            source: self.board_image
        Color:
            rgba: 0, 0, 0, 1
        Line:
            points: root.grid_points
            width: 1
        Color:
            rgba: 1, 0, 0, 0.1
        Rectangle:
            size: root.goal_rectangle_size
            pos: root.top_rectangle_pos
        Color:
            rgba: 0, 1, 0, 0.1
        Rectangle:
            size: root.goal_rectangle_size
            pos: root.bottom_rectangle_pos
    MoveMakingMarker:
        id: move_marker
        board: board