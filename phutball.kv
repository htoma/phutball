#:import Window kivy.core.window.Window
#:import Vector kivy.vector.Vector

<Label>:
    font_name: 'Hultog.ttf'
    color: 0, 0, 0, 1
    font_size: sp(18)

<ActionButton>:
    color: 1, 1, 1, 1

<Message>:
    text: self.board_message
    padding: sp(15), sp(15)
    size_hint: None, None
    pos_hint: {'center_x': 0.5, 'top': 0.4}
    width: 0.9*self.board_width 
    text_size: self.width, None
    height: self.texture_size[1]
    valign: 'middle'
    halign: 'left'
    color: 1, 1, 1, 1
    font_size: sp(18)
    markup: True
    pos:
        (self.board.x + 0.5*(self.board.width - self.width),
        self.board.center_y - 0.1*self.board.height -
        self.texture_size[0]) if self.board else (0, 0)
    canvas.before:
        Color:
            rgba: (0, 0, 0, 0.8) if self.text else (0, 0, 0, 0)
        Rectangle:
            pos: Vector(self.pos) - Vector([sp(10), sp(10)])
            size: Vector(self.size) + Vector([sp(20), sp(20)])
        

<ThemedButton@Button>:
    background_normal: 'white_pixel.png'
    background_down: 'blue_pixel.png'

<VerticalSpacer@Widget>:
    colour: [0.1, 0.1, 0.1]
    gap: 0.03
    size_hint_y: None
    height: sp(1.1)
    canvas:
        Color:
            rgb: self.colour
        Line:
            points: [self.x + self.gap*self.width, self.y + 0.5*self.height, self.x + (1.-self.gap)*self.width, self.y + 0.5*self.height]
            width: self.height

<HorizontalSpacer@Widget>:
    colour: [0.1, 0.1, 0.1]
    gap: 0.03
    size_hint_x: None
    width: sp(1.1)
    canvas:
        Color:
            rgb: self.colour
        Line:
            points: [self.x + 0.5*self.width, self.y + self.gap*self.height, self.x + 0.5*self.width, self.y + (1.-self.gap)*self.height]
            width: self.width

<ProblemButton>:
    background_color: (0, 1, 0, 1)

<ProblemLabel>:
    size_hint_y: None
    height: sp(38)
    font_size: sp(34)
    

<PhutballInterface>:
    orientation: 'vertical'
    manager: manager
    actionbar: navbar
    NavBar:
        id: navbar
    PhutballManager:
        id: manager

<NavBar>:
    ActionView:
        ActionPrevious:
            title: ''
            on_release: app.manager.go_back()
        ActionOverflow:
        ActionButton:
            text: 'Save'
            on_release: app.manager.try_save()
        ActionButton:
            text: 'Load'
            on_release: app.manager.try_load()

<PhutballManager>:
    HomeScreen:

<ProblemChooserScreen>:
    name: 'problemchooser'
    GridLayout:
        cols: 4
        

<HomeScreen>:
    name: 'home'
    BoxLayout:
        orientation: 'vertical'
        Image:
            source: 'gradient_vertical_down.png'
            allow_stretch: True
            keep_ratio: False
            height: sp(8)
            size_hint_y: None
        Widget:
            size_hint_y: None
            height: sp(15)
        Label:
            size_hint_y: None
            height: dp(100)
            font_size: 0.85*self.height
            text: 'Phutball'
            color: (0, 0, 0, 1)
            text_size: self.size
            halign: 'center'
            valign: 'middle'
        GridLayout:
            cols: 2
            ThemedButton:
                text: 'Tutorial'
                font_size: 40
                #on_release: app.manager.tutorial()
                on_release: app.manager.new_board(from_file='tutorial2.phut')
            ThemedButton:
                text: 'Puzzles'
                font_size: 40
                on_release:
                    app.manager.puzzles_index()
            ThemedButton:
                text: 'AI game'
                font_size: 40
                on_release:
                    app.manager.new_board(ai=True)
            ThemedButton:
                text: 'Human game'
                font_size: 40
                on_release:
                    app.manager.new_board(ai=False)
        
<GameScreen>:
    BoardInterface:

<ColourChangeButton>:
    colour_diff: Vector(self.colour_after) - Vector(self.colour_before)
    canvas:
        Color:
            rgba: Vector(self.colour_before) + Vector(self.colour_diff) * self.anim_progress
        Rectangle:
            pos: Vector(self.pos)
            size: Vector(self.size)

<PlayManButton>:
    text: 'Play man'
    on_active: print 'play man {}'.format(self.active)
    colour_before: 1, 1, 1, 1
    colour_after: 0.8, 0.8, 0.99, 1
    Label:
        text: root.text
        color: 0, 0, 0, 1

<ToggleModeButton>:
    text: 'Toggle man'
    colour_before: 1, 1, 1, 1
    colour_after: 1, 0.76, 0.8, 1
    Label:
        text: root.text
        color: 0, 0, 0, 1

<ConfirmButton>:
    text: 'Confirm'
    colour_before: 0.9, 0.9, 0.9, 1
    colour_after: 0.99, 0.5, 0.5, 1
    Label:
        text: root.text
        color: 0, 0, 0, 1

<MoveButton>:
    text: 'Move ball'
    colour_before: 1, 1, 1, 1
    colour_after: 0.8, 0.99, 0.8, 1
    Label:
        text: root.text
        color: 0, 0, 0, 1

<InterfaceButtons>:
    mode: self.board.touch_mode if self.board else 'play_man'
    play_man_button: playman
    move_button: move
    confirm_button: confirm
    Label:
        text_size: self.size
        text: root.board.current_player + ' to play' if root.board else ''
        valign: 'middle'
        halign: 'center'
        color: (0, 0, 0, 1)
    HorizontalSpacer:
    ToggleModeButton:
        id: togglemode
        on_release: root.board.touch_mode = 'toggle_man'
        active: True if root.touch_mode == 'toggle_man' else False
    HorizontalSpacer:
    PlayManButton:
        id: playman
        on_release: root.board.touch_mode = 'play_man'
        active: True if root.touch_mode == 'play_man' else False
    HorizontalSpacer:
    MoveButton:
        id: move
        on_release: root.board.touch_mode = 'move_ball'
        active: True if root.touch_mode == 'move_ball' else False
    HorizontalSpacer:
    ConfirmButton:
        id: confirm
        on_release: root.board.confirm_speculation()
        active: root.can_confirm

<MoveMakingMarker>:
    canvas:
        Color:
            rgba: self.colour[0], self.colour[1], self.colour[2], 0.7*self.anim_progress
        Triangle:
            points:
                [self.center_x - 0.4*self.width - (1-self.anim_progress)*5*self.width,
                self.center_y,
                self.center_x - 0.4*self.width - (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.3*self.height,
                self.center_x - 0.4*self.width - (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.7*self.height]
        Triangle:
            points:
                [self.center_x + 0.4*self.width + (1-self.anim_progress)*5*self.width,
                self.center_y,
                self.center_x + 0.4*self.width + (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.3*self.height,
                self.center_x + 0.4*self.width + (7+3*(1-self.anim_progress))*self.width,
                self.y + 0.7*self.height]
        Triangle:
            points:
                [self.center_x,
                self.center_y - 0.4*self.height - (1-self.anim_progress)*5*self.height,
                self.center_x + 0.2*self.width,
                self.center_y - 0.4*self.height - (7+3*(1-self.anim_progress))*self.height,
                self.x + 0.3*self.width,
                self.center_y - 0.4*self.height - (7+3*(1-self.anim_progress))*self.height]
        Triangle:
            points:
                [self.center_x,
                self.center_y + 0.4*self.height + (1-self.anim_progress)*5*self.height,
                self.center_x + 0.2*self.width,
                self.center_y + 0.4*self.height + (7+3*(1-self.anim_progress))*self.height,
                self.x + 0.3*self.width,
                self.center_y + 0.4*self.height + (7+3*(1-self.anim_progress))*self.height]


<VictoryPopup>:
    height: 260
    size_hint_y: None
    size_hint_x: 0.8
    Label:
        text: root.winner + ' wins!'
        color: 1, 1, 1, 1
        padding: 10, 10
        font_size: 100
        text_size: self.size
        halign: 'center'
        valign: 'middle'

<ConflictingSegmentMarker>:
    canvas:
        Color:
            rgba: 0.9, 0.1, 0.1, 1
        Line:
            points: root.points
            width: 2

<SpeculativeSegmentMarker>:
    canvas:
        Color:
            rgba: 0.1, 0.9, 0.1, 1.0
        Line:
            points: [root.start_pos[0], root.start_pos[1], root.end_pos[0], root.end_pos[1]]
            width: 2

<BoardInterface>:
    orientation: 'vertical'
    board: boardcontainer.board
    BoardContainer:
        id: boardcontainer
        size_hint_y: None if Window.height > 1.2*Window.width else 3
        height: 1.1*Window.width
    VerticalSpacer:
        gap: 0
        line_width: 1
    FloatLayout:
        size_hint_y: None
        height: 0
        Image:
            source: 'gradient_vertical.png'
            allow_stretch: True
            keep_ratio: False
            pos_hint: {'x': 0, 'y': 0}
            size_hint: 1, None
            height: sp(8)
        Image:
            source: 'gradient_vertical_down.png'
            allow_stretch: True
            keep_ratio: False
            pos: self.parent.x, self.parent.top - self.height
            pos_hint: {'x': 0}
            top: boardcontainer.top
            height: sp(8)
            size_hint: 1, None
    InterfaceButtons:
        board: boardcontainer.board
        touch_mode: boardcontainer.board.touch_mode
        can_confirm: boardcontainer.board.can_confirm

<LegalMoveMarker>:
    canvas:
        Color:
            rgba: 0, 0, 1, 0.1
        Ellipse:
            size: self.size
            pos: self.pos

<Ball>:
    allow_stretch: True
    mipmap: True
    source: 'stones/white_simple_100.png'

<Man>:
    allow_stretch: True
    mipmap: True
    source: 'stones/black_simple_100.png'

<BoardContainer>:
    board: board
    aspect_ratio: float(self.height) / float(self.width)
    AnchorLayout:
        size_hint: 1, 1
        pos_hint: {'x': 0, 'y': 0}
        anchor_x: 'center'
        anchor_y: 'center'
        Board:
            id: board
            size_hint: None, None
            width: root.height / self.aspect_ratio if (self.portrait and self.aspect_ratio > root.aspect_ratio) else root.width
            height: root.height if (self.portrait and self.aspect_ratio > root.aspect_ratio) else root.width * self.aspect_ratio
    Message:
        board: board
        board_width: board.width
        board_message: board.message
        

<Board>:
    id: board
    move_marker: move_marker
    aspect_ratio: float(self.shape_y) / float(self.shape_x)
    portrait: True if self.aspect_ratio > 1.0 else False
    shape: (self.grid_x + 2*self.padding_x, self.grid_y + 2*self.padding_y)
    cell_size: (float(self.width) / self.shape_x, float(self.height) / self.shape_y)
    can_confirm: bool(self.speculative_segment_markers)
    on_pos: self.calculate_lines(); self.reposition_ui_elements()
    on_size: self.calculate_lines(); self.reposition_ui_elements()
    on_grid: self.abstractboard.shape = self.grid
    on_can_confirm: print 'can confirm {}'.format(self.can_confirm)
    on_touch_down: print self.abstractboard.ball_coords
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            size: self.size
            pos: self.pos
            source: self.board_image
        Color:
            rgba: 0, 0, 0, 1
        Line:
            points: root.grid_points
            width: 1
        Color:
            rgba: 0, 1, 0, 0.1
        Rectangle:
            size: root.goal_rectangle_size
            pos: root.top_rectangle_pos
        Color:
            rgba: 1, 0, 0, 0.1
        Rectangle:
            size: root.goal_rectangle_size
            pos: root.bottom_rectangle_pos
    MoveMakingMarker:
        id: move_marker
        board: board
